
The negative sign in the resolve interpenetartion function in the
ParticleContact class which is different from the book, make sure
it works.

The matrix classes and the use of explicit formulas instead of
general formulas.

Remove the union and keep only the struct components as member
variables in the quaternion class.

Make the inverse transform into one single operation instead of
two when converting world to local coordinates (DONE).

Get rid of preprocessor macros (except for header guards), use
global variables or typedef instead.

Include H in header guards.

Fix the tetrahedron inertia tensor, which is wobbly now (DONE).

Use the wrapper transform function to transform world and local
coordinates instead of doing direct multiplication (DONE).

Fix the issue where body->transformMatrix.transform(connectionPoint)
doesn't work and the definition is not recognized in the source file
(DONE).

Add a comment explaining each header for the headers that don't
have it.

Remove all header and source files not relating to the engine (used
for testing, like the geometric objects and their interface).

Since we created a BVH tree class, we can perhaps use loops instead
of recursion to insert and remove nodes, and then recalculate the
bounding volumes of the ancestors without having each node hold
a pointer to the parent, something that causes redundancies in the
relationship between nodes and may cause errors if they parent/child
status does not match.

Turn the bounding volume from a template with overlaps() and
getGrowth() functions to an interface and extended class, and dont
forget to place the functions in an implementation file now that there
is no template.

Remove the display functions of the tree.

Make bounding sphere datas private after testing.

Later on, make sure the "Geometric objects" like cube extend both
the rigid body and the geometric object classes.

Make sure the remove of BVH tree and node classes works well,
because it likely doesn't handle edge cases at all.

Either use body or rigidBody as a variable name consistently.

Instead of a collision detection and resolution algorithm for each
new shape, we can implement the SAT (seperating axis theorem) for
a general algorithm that works for all convex polyhedra.

Initialize in each shape's contructor the transform variable.

Fix the generation of contacts in the array, right now only the
first value is being set. Maybe use a counter.

Figure out what offset should be when we don't want to rotate,
and add it by default in transform. Make sure its updated every
frame.

Make sure that the change in the collision of a box and plane
works.

Should the normal in the face class be just a fucntion, which
means the values are recalculated each time it's called, wasting
time, or shouldi it be a variable updated each frame, saving time,
but forcing us to update it? Solve this.

Ensure whether SAT expects the normal to be calculated clockwise
from the vertices, or if it doesn't matter.

Is it better practice to recalculate the normal vector from the
vertices each time? or transform the normal vector each frame using
the transform of the body?

Remove the specific collision detection / contact generation and use
SAT and a general contact generation function.

Make sure BHV is optimized and remains balanced after additions and
removals.

Place your code in folders so it's more organized.

Detail and resolve the tradeoff between recalcuting normals, bouding
volume spheres each frame (accuracy) vs once, and then transforming
them (speed).

Test bounding volume hierarchy visually.

Test collision contact generation (not resoltuion).

Instead of multiplying directily by the transform matrix, use
the transform matrice's built in transform function.

Make sure BHV is self balancing for maximum performance.

UNCLEAR WHY BUT USING body->getPointInWorldCoordinates(connectionPoint)
gives an error, so instead the transform matrix is used directly
in spring and cable forces.

Replace body cable and rod with contacts rather than ordinary
forces like a spring, more realistic.

Ensure that all opengl / sfml / gml code is seperate from the physcis
and collision modules. This ensures the engine does not depend on a
specific graphics library in order to run and simulate physics (DONE).

Make a file that is just for tessalation (DONE).

Create a primitive class that can handle all different kinds of
primitives, and provides a graphics engine independent interface to
its vertices, and vertex/face normals, edges, in such a way as to cover
all bases (for instance, in a cube, the vertex normals are themselves
the same as the face's, while in a sphere, the vertex normals are
can be calculated individually for the best effect). This will help,
as it ensures the same shaders can be used for any type of primitive,
and special shaders no longer need to be employed. It also removes
some of the calculations from the shader programs.

Sdd checking in primitive for counter clockwise order.