
The negative sign in the resolve interpenetartion function in the
ParticleContact class which is different from the book, make sure
it works. (DONE)

The matrix classes and the use of explicit formulas instead of
general formulas. (WON'T CHANGE IT, IT IS FASTER THIS WAY)

Remove the union and keep only the struct components as member
variables in the quaternion class. (NO NEED TO REMOVE IT)

Make the inverse transform into one single operation instead of
two when converting world to local coordinates (DONE).

Get rid of preprocessor macros (except for header guards), use
global variables or typedef instead (DONE).

Include H in header guards (DONE).

Fix the tetrahedron inertia tensor, which is wobbly now (DONE).

Use the wrapper transform function to transform world and local
coordinates instead of doing direct multiplication (DONE).

Fix the issue where body->transformMatrix.transform(connectionPoint)
doesn't work and the definition is not recognized in the source file
(DONE).

Add a comment explaining each header for the headers that don't
have it.

Remove all header and source files not relating to the engine (used
for testing, like the geometric objects and their interface). (DONE)

Since we created a BVH tree class, we can perhaps use loops instead
of recursion to insert and remove nodes, and then recalculate the
bounding volumes of the ancestors without having each node hold
a pointer to the parent, something that causes redundancies in the
relationship between nodes and may cause errors if they parent/child
status does not match. (WILL NOT DO IT)

Turn the bounding volume from a template with overlaps() and
getGrowth() functions to an interface and extended class, and dont
forget to place the functions in an implementation file now that there
is no template. (NOT SURE IF WE'LL DO IT)

Remove the display functions of the tree. (DONE)

Make bounding sphere datas private after testing.

Later on, make sure the "Geometric objects" like cube extend both
the rigid body and the geometric object classes. 
(THIS STRUCTURE FUNDAMENTALLY CHANGED)

Make sure the removal of BVH tree and node classes works well,
because it likely doesn't handle edge cases at all.

Either use body or rigidBody as a variable name consistently.

Instead of a collision detection and resolution algorithm for each
new shape, we can implement the SAT (seperating axis theorem) for
a general algorithm that works for all convex polyhedra. (DONE)

Initialize in each shape's contructor the transform variable.

Fix the generation of contacts in the array, right now only the
first value is being set. Maybe use a counter (DONE).

Figure out what offset should be when we don't want to rotate,
and add it by default in transform. Make sure its updated every
frame (DONE).

Make sure that the change in the collision of a box and plane
works (DONE, FIXED THE POINT AND FACE FUNCTION).

Should the normal in the face class be just a fucntion, which
means the values are recalculated each time it's called, wasting
time, or shouldi it be a variable updated each frame, saving time,
but forcing us to update it? Solve this (DONE, RESOLVED).

Ensure whether SAT expects the normal to be calculated clockwise
from the vertices, or if it doesn't matter (DONE, IT'S ALWAYS
COUNTER CLOCKWISE).

Is it better practice to recalculate the normal vector from the
vertices each time? or transform the normal vector each frame using
the transform of the body? (DONE, RESOLVED)

Remove the specific collision detection / contact generation and use
SAT and a general contact generation function (DONE).

Make sure BHV is optimized and remains balanced after additions and
removals.

Place your code in folders so it's more organized (DONE, USING FILTERS).

Detail and resolve the tradeoff between recalcuting normals, bouding
volume spheres each frame (accuracy) vs once, and then transforming
them (speed) (DONE).

Test bounding volume hierarchy visually.

Test collision contact generation (not resoltuion) (DONE).

Instead of multiplying directily by the transform matrix, use
the transform matrice's built in transform function.

Make sure BHV is self balancing for maximum performance.

UNCLEAR WHY BUT USING body->getPointInWorldCoordinates(connectionPoint)
gives an error, so instead the transform matrix is used directly
in spring and cable forces.

Replace body cable and rod with contacts rather than ordinary
forces like a spring, more realistic.

Ensure that all opengl / sfml / gml code is seperate from the physcis
and collision modules. This ensures the engine does not depend on a
specific graphics library in order to run and simulate physics (DONE).

Make a file that is just for tessalation (DONE).

Create a primitive class that can handle all different kinds of
primitives, and provides a graphics engine independent interface to
its vertices, and vertex/face normals, edges, in such a way as to cover
all bases (for instance, in a cube, the vertex normals are themselves
the same as the face's, while in a sphere, the vertex normals are
can be calculated individually for the best effect). This will help,
as it ensures the same shaders can be used for any type of primitive,
and special shaders no longer need to be employed. It also removes
some of the calculations from the shader programs (DONE).

Add checking in primitive for counter clockwise order.

Add a comment to setSkewSymmetric function in the matrix class (DONE).

One of the two contact generation types isn't working well (DONE).

Also, the total number of iterations in the collision resolution 
causes the objects to fly to infinity when it's set to more than 1 (DONE).

Add comments explaining the tessalation ouptut format for each shape (DONE).

Add an isAwake state for the rigidBody class. This should be checked
inside the contact functions before we integrate them or move them (DONE).

Add for each shape a function that initially calculates the furthest
point in the polyhedron from the center. Which we can then use for the
coarse collision detection (DONE).

Implement the bounding volume as inheritance instead of templates,
with an overriden function that checks if two bounding volumes overlap
based on their geometry.
Explain in detail what each function in the collision detection
classes do, as well as the datafields in the contact class. 

Fix the coarse collision detection class; currently the class works
on rigid bodies, not polyhedrons, which is fine, but also means that
when we do get an array of potential contacts, we have to then map
them back to their polyhedrons. One way to do that would be to send
the entire polyhedron to the hierarchy, not just the, body, or have
a way of mapping the body to the polyhedron in a quick way (DONE).

Prevent the cloth mesh from passing through itself.

Implement substeppig in a more reusable way (DONE).

Redesign the way the polyhedrons are partitioned into faces so that
the faces are not recreated each frame, maybe by using pointers to
the vertices and an update function. Just in general those areas needd
refactoring (DONE).

Delete the not equal operator (DONE). 

Fix the angle constraint (DONE).

Remove the different implementations of the polyhedron class, leave
only the best one (DONE). 

One possible improvement for performance is doing a conversion to GLM
for the unique vertices without having to repeat it for each copy in
faces and triangles.

Fix up the default order thing with clockwise and counter clockwise.

Fix the smooth face data function with triangulation and normals
calculations (DONE).

Add distinct tangent and bitangent for a curved face (DONE).

Connect the particle mesh to the face class written so we don't
have to rewrite most functionalities, and extend it (use something
that isn't a face or curvedFace). We can do that by having a vector
of positions that correspond to the particles to use (DONE).

Include a new update function in the face class that updates the
normals, centroid etc... by recalculating them using the
global, not local vertices (DONE).

Merge particleMesh and cloth, get rid of cord (DONE).

Fix anisotropic shading (DONE, THE ISSUE WAS THAT ONCE THE TEXTURE
COORDINATES CHANGED, THE LOCAL TANGENT AND BITANGENTS USED TO GET
THE TANGENTS AND BITANGENTS EACH FRAME WEREN'T MODIFIED TO REFLECT
THAT).

Fix vec2 issue in texture shading (DONE).

Merge the lighting and texture shaders: don't repeat them.

Add a destructor to the polyhedron (DONE).

See how to map to uv coordinates from a segment in 3D space.
(DONE, FIGRED IT OUT BY USING TANGENTS, BITANGENT, AND NORMALS
AS BASIS VECTORS).

Fix the resting contacts issue where after a few minutes the
objects fall through each other.

The hinge forces work, but because they are applied at the centre
of the bodies, the second body does not dangle off teh first as there
is no rotation. Moreover, adding the force at the connection point
makes it unstable as hell. We need a better hinge.

The other kind of joint, done using contacts, is incredibly unstable
(DONE, FIXED).

Spring joints are too weak as stiff springs are an issue.

Fix the the sleep state, which is currently not correct.

The contact joint now only works if the last object in a series
has negligible weight (DONE, FIXED).

Add an edge to edge in the second collision generation method 
(DECIDED AGAINST IT).

Change the named of functions in the third collision generation
method (DONE).

Consider using EBOs instead of sending all vertices. 

Consider creating the shadow and environment maps only during
initialization (DONE).

Comment and explain all three collision generation methods.

Consider the benefits of sending the local vertices of the
shapes to the shaders; it could mean saving memory and time
by using the same VBOs and VAOs as the vertices remain the same,
but it also means we are using an extra matrix transformation for
each vertex to get it to world coordinates. Especially now that
transformation may not be necessary anymore for collision
detection (DONE).

Add an intertia tensor approximator for custom primitives (DONE).

Fix pyramid collison box halfsize (DONE. I did by adding an offset
for the centre of gravity, and then rotating that offset by
the rotation of the transform matrix; the new transform for the
collision box is the rotation and the translation + the offset).

When polyhedron is being imported from outside, it doesn't rotate
when forces are applied to it (DONE, it turns out, I accidently
gave it an all 0 intertia tensor, since I hadn't yet made a function
to approximate the intertia tensor).

Write a possible common interface to all types of collision volumes
(DONE, DECIDED AGAINST IT).

Possibly use the same bounding sphere for the coarse collision
detection, as it has an offset; finding the furthest point from the
centre of gravity and using it as a radius guarantees the centre of
the sphere is the same as the polyhedron (DECIDED AGAINST IT). 

Make particles pointer type and include a destructor (DONE).

Change particle awake to fixed.

Make sure the generateParticleGrid function can work for a cloth that
is vertical, horizontal, or along the z axis, not just when it is
vertical.

Make the GLSL their own files (DONE).

Fix the way we calculate the default texture coordinates, or remove
them entirely.

Restructure the shaders so that each frame doesn't recreate the VAO
and VBO. This avoids the need for updating the global vertices each
frame manually as the shader will do it (DONE).

Add a check in the camera to verify the point the camera is looking at
isn't the same as its position (which makes the screen black).

Use the custom core classes for the camera, not the openGL ones
(DECIDED AGAINST THIS ONE).

Add a first person camera (DONE).

Calculate the camera position from the view matrix in the vertex,
not fragment shader, and send it to the fragment shader (DONE).

Consider using a bias matrix to turn the homogenous coordinates
into texture coordinates instead of doing it in the shader.

Switch to GLFW (DONE).

Create lighting types for the shadow mapping (DONE).

Remove global vertices from faces, edges and from the polyhedron
class; neither the collision nor rendeirng module need them since
both use the transform matrices. For meshes that don't have a
transform matrix, we can create a new face each frame (DONE).

Add wind effect (DONE).

Add tetxure mapping functions for cloth so textures can be scaled.

Fix rotating camera centre.

Create an anchored body spring force.

Fix bounding volume hierarhcy.

Include a setter for inverse mass that recalculates everything.

Fix alhpa value for texture shaders (so the transparent ones
are actually transparent and don't just match bakground color
while still having alpha value 1).

Add all the types of textures (MORE OR LESS DONE).

Fix arrays sent to shaders (DONE).

Add image splitter.

Add way to resize textures here instead of manually.

Change name fo fragment and vertex shaders from .glsl to .frag
and .vert (DONE).

Fix long comment in face and curved face class to remove mention
of global vertices.

Update SAT and GJK since now all vertices are local (DONE, THOUGH
SAT IS NOW VERY SLOW).

Implement the Eigen functions (Jacobi method).

Fix the the AABB frustum culling as it is not working yet.

Fix the OBB calculation and use the OBB instead of a transformed
AABB (DONE).

Test bounding volume hierarchy.

After seperating the farcture from applying forces on fractures,
the latter functionality needs its own function.
 
Fix texture units.

Consider making the bounding volumes take vertices instead of
polyhedron (DECIDED AGAINST THIS).

Add a scale to the bounding volumes.

Fix the edges and faces of the mesh such that the forces/springs
are not necessarily the same as the vidible edges. Fix faces too
to be less complex, with less functionality, and not part of the class
but rather, just returned each frame. Make curved faces less complex.

Make mesh universal, for both piolyhedra and soft bodies, and then 
make more specific classes for the subsidivisions. Let the mesh be
purely visual, with just faces and edges and no physics at all, no
body or particles, epsecially since collisions are now handled by
the bounding volumes.

Remove the cuboidal, spherical etc... interfaces, and instead make
them interfaces for the later object classes, instead of the polyhedron.

Explore the idea of making bounding volumes shared among objects, the
same way meshes are, so we spend less time fitting them (DONE).

Consider adding the sleep condition, this time to the object,
since they were removed from the body.

Make it so the VAO and VBO are binded whenever we want to a single
shader program, instead of having a shader program per mesh or
object. Let the VAOs be bound to their meshes instead.

No need to recreate and resend the VAO each frame for deformable
bodies. We can simply modify them, which is faster.

Consider splitting the rendering form the mesh.

Fix the shaders such that there is no special texture version,
and all are essentially the same.

Consider making the shaders subclasses of each other. Also add
a subclass of solid color shader which can scale bounding boxes
at will (DONE).

Consider adding the ability to change vector size in the buffer
class, right not it is fixed at vec3.

Make sure you're using throw in all the invalid argument exception
instances, and remember to replace necessary asserts with the
argument exceptions.

Fix render as per the new mesh and vertex buffer designs (DONE).

Figure out how to work the curvature into the mesh, in a function
that updates the vertex normals using a curvature, but ensure
the curvature is actually valid.

Consider using an EBO instead of triangulation (DECIDED AGAINST IT).

Consider adding a capsule bounding volume.

Fix the BVH since there is no more a polyhedron. Perhaps by
using indexes instead of sending pointers to polyhedra or
bodies (DONE).

Fix frustum culling, maybe get rid of it for now.

Ensure triangulation in renderer works.

Make the imported primitive return a vector of primitives for each
texture.

Ensure each face has default uv coordinates.

Consider adding a way to adjust scale without changing the mesh
(using the same primitive object).

Make the particle updateForce function const.

See if you want the skybox to be mapped in the environment, or
in the shader directly sent.

Test generateFaceData().

Test the vertex buffer error handling when the vertex data
sent doesn't match the allocated space.

Add a way to draw bounding volumes (DONE).

Reconsider explicit boudning volume types in the derived
classes.

Consider making the objects in the BVH const (though the
potential contacts then can't be used for the fine collision
detection and resolution as the body is altered).

Fix the issue where generating all contacts between all objects
generates each contact twice, since order is considered
(permutation when combinations are what's neede) (SOLVED,
THE BVH DOES THIS AUTOMATICALLY, BUT EVEN WITHOUT IT, WE
CAN JUST PLACE THEM AL IN A VECTOR AND USE 2 FOR LOOPS,
WITH THE INNER ONE GOING ONLY AS FAR AS THE FIRST).

Fix the BVH (DONE, THE ISSUE WAS THAT THE GETTER FOR THE]
POTENTIAL CONTACTS HAD TO BE CALLED AT EACH NODE, NOT
JUST THE ROOT).

Consider re-adding templates for the bounding volume type
of the rigidObject, and consider also adding templates for
the spring type (though make sure the spring force generator
of the particles is made into a class first that all springs
and bungee forces inherit from).

Make sure removing the matchAwakeState functionality from the
collision resolver was the right move.

Currently, the isAwake state of bodies and particles acts as
an isActive boolean; when false, the body can't be moved or
pushed and is essentially still. However; isAwake should instead
be used to put the body to sleep when it stops moving and 
move it again when a force is added to it or when it collides.
The isAwake and isActive should be seperate, and both are
usable. When that is done, return the matchAwakeState function
to the collision resolver, since isAwake no longer acts as
an isActive.

Add multiple light sources to shadow mapping shader.