/*
	File used for util functions, concerned with tesselating spheres and
	curved surfaces.
*/

#ifndef TESSELATION_UTIL_H
#define TESSELATION_UTIL_H

#include <GL/glew.h>
#include <SFML/Graphics.hpp>
#include <SFML/Window.hpp>
#include <SFML/OpenGL.hpp>
#include <GL/gl.h>

#include <SFML/Graphics.hpp>
#include <glm.hpp>
#include <gtc/type_ptr.hpp>
#include <gtc/matrix_transform.hpp>
#include <SFML/OpenGL.hpp>
#include "vector3D.h"
#include "matrix3x4.h"

namespace pe {

	/*
		Tesselates (divides) a sphere into several faces. This function
		returns the vertices where the longtitude and latitude segments
		meet. Note that if we are defining the local vertices of the
		sphere, the center we send to define the vertices around should be
		the origin (0, 0, 0), because these vertices are local.
	*/
	std::vector<Vector3D> generateSphereVertices(const Vector3D& center,
		real radius, int latitudeSegments, int longitudeSegments);


	/*
		Returns a vector of vectors of pointer to vertices that represents
		the triangles faces of the tesselated sphere generated by the above
		function. The order of the triangle vertices is counter clockwise.
	*/
	std::vector<std::vector<Vector3D*>> returnTesselatedFaces(
		std::vector<Vector3D>& vertices,
		int latitudeSegments,
		int longitudeSegments
	);

	/*
		Does the same but for the edges.
	*/
	std::vector<std::pair<Vector3D*, Vector3D*>> returnTesselatedEdges(
		std::vector<Vector3D>& vertices,
		int latitudeSegments,
		int longitudeSegments
	);
}


#endif
